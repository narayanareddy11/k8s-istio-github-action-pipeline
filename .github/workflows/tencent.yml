name: BookInfo Deployment with Istio

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  setup:
    name: Setup Minikube & Kubernetes
    runs-on: k8s-istio

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Start Minikube
        run: |
          if ! minikube status; then
            echo "Starting Minikube..."
            minikube start
          else
            echo "Minikube is already running."
          fi

      - name: Set up kubectl
        run: |
          kubectl cluster-info
          kubectl get nodes

  install_istio:
    name: check Istio
    runs-on: k8s-istio
    needs: setup  # Runs after setup job
    steps:
      - name: Check Istio Installation
        id: istio_check
        run: |
          if kubectl get namespace istio-system &>/dev/null; then
            echo "Istio is already installed."
            echo "installed=true" >> $GITHUB_ENV
          else
            echo "Istio is not installed."
            echo "installed=false" >> $GITHUB_ENV
          fi

      - name: Install Istio (if not installed)
        if: env.installed == 'false'
        run: |
          curl -L https://istio.io/downloadIstio | sh -
          cd istio-*/
          export PATH=$PWD/bin:$PATH
          istioctl install --set profile=demo -y
          kubectl label namespace default istio-injection=enabled

  deploy_bookinfo:
    name: Deploy BookInfo App
    runs-on: k8s-istio
    needs: install_istio  # Runs after Istio is installed

    steps:
      - name: Deploy BookInfo Application
        run: |
          kubectl apply -f samples/bookinfo/platform/kube/bookinfo.yaml
          kubectl apply -f samples/bookinfo/networking/bookinfo-gateway.yaml

      - name: Wait for Pods to be Ready
        run: |
          kubectl wait --for=condition=ready pod --all --timeout=120s

  verify_deployment:
    name: Verify Deployment
    runs-on: k8s-istio
    needs: deploy_bookinfo  # Runs after deployment

    steps:
      - name: Check Running Services
        run: |
          kubectl get pods -n default
          kubectl get svc -n default
          kubectl get gateways -n default

      - name: Capture Logs on Failure
        if: failure()
        run: |
          kubectl get events --sort-by=.metadata.creationTimestamp > logs.txt
          kubectl logs -l app=productpage > productpage-logs.txt
          cat logs.txt
          cat productpage-logs.txt

  monitor_grafana:
    name: Monitor Grafana
    runs-on: k8s-istio
    needs: setup
    steps:
      - name: Check Grafana URL
        run: |
          GRAFANA_URL="http://${MINIKUBE_IP}:3000"
          echo "Checking Grafana URL: $GRAFANA_URL"

  monitor_prometheus:
    name: Monitor Prometheus
    runs-on: k8s-istio
    needs: setup
    steps:
      - name: Check Prometheus URL
        run: |
          PROMETHEUS_URL="http://${MINIKUBE_IP}:9090"
          echo "Checking Prometheus URL: $PROMETHEUS_URL"